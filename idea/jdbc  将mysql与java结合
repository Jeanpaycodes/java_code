package com.atguigu.jdbc2;

import java.io.FileInputStream;
import java.sql.*;
import java.util.Properties;

public class JDBCUtils {

    private static String url = null;
    private static String username = null;
    private static String password = null;
    private static String driverName = null;

    static {
        try {
            //读取配置文件中的内容
            //1.创建Properties的对象
            Properties properties = new Properties();
            //2.创建流
            FileInputStream fis = new FileInputStream("jdbc.properties");
            //3.加载流---通过properties读取数据
            properties.load(fis);
            //4.读取数据
            username = properties.getProperty("username");
            password = properties.getProperty("password");
            url = properties.getProperty("url");
            driverName = properties.getProperty("driverName");
            System.out.println(username + " " + password + " " + url + " " + driverName);
            //5.关闭资源
            fis.close();
        }catch (Exception e){
            e.printStackTrace();//打印异常详细信息
            //直接终止程序运行 (将编译时异常转为运行时异常)
            throw new RuntimeException(e.getMessage());
        }
    }

    //返回Connection对象
    public static Connection getConnection() {
        try {
            //目的是为了让Driver进行类的初始化--那么就会执行静态代码块
            Class.forName(driverName);
            //3.通过DriverManager获取Connection对象
            Connection connection = DriverManager.getConnection(url, username, password);
            return connection;
        }catch (Exception e){
            //直接终止程序运行 (将编译时异常转为运行时异常)
            throw new RuntimeException(e.getMessage());
        }
    }

    /*
        关闭资源
     */
    public static void close(Connection connection, PreparedStatement ps) {
        if (ps != null){
            try {
                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        if (connection != null){
            try {
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public static void close(Connection connection, PreparedStatement ps, ResultSet rs) {
        close(connection,ps);

        if (rs != null){
            try {
                rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}

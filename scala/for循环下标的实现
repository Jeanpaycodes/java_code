package com.atguigu.chapter04

object $03_ForMethod {

  /**
    * for循环两个重要方法
    *       to方法
    *           语法: start.to(end) / start to end
    *           to方法生成是左右闭合的集合
    *       until方法
    *           语法: start.until(end) / start until end
    *           until方法生成的是左闭右开的集合
    */
  def main(args: Array[String]): Unit = {

    val res = 10 to 1 by -1
    println(res.toList)

    val res2 = 1 until 10
    println(res2.toList)
    
    for( i <- 1 to 10) {
      println( s"i=${i}" )
    }

    //for循环嵌套if分支
    for( j<- 1 to 10){
      val a = j * 3
      if( a % 2 ==0 ){
        println(s"j=${j}")
      }

    }

    //守卫
    for( k <- 1 to 10 if( k %2==0 ) ) {
      println(s"k=${k}")
      10
    }

    //yield表达式
    val res = for( p <- 1 to 10 ) yield {
      p * 10
    }

    println(res)
    
  }
}

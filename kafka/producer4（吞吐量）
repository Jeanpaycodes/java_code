package com.atguigu.kafka.producer;

import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.serialization.StringSerializer;

import java.util.Properties;

/**
 * @author leon
 * @ClassName CustomProducer.java
 * @createTime 2022年06月18日 15:39:00
 */
public class CustomProducerTuntuliang {
    public static void main(String[] args) throws InterruptedException {
        // 1. 创建配置对象
        Properties properties = new Properties();     //配置对象里面设置服务器、序列化器、拦截器、分区器等
        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"hadoop102:9092,hadoop103:9092");
        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());

        properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG,"com.atguigu.kafka.partition.CustomPartitioner");

        // 吞吐量配置
        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG,33554432 );   
        properties.put(ProducerConfig.BATCH_SIZE_CONFIG,16384);    //设置线程共享变量的属性值
        properties.put(ProducerConfig.LINGER_MS_CONFIG,50);   
        properties.put(ProducerConfig.COMPRESSION_TYPE_CONFIG,"snappy");  //设置压缩格式

        // 2. 创建kafkaProducer对象
        KafkaProducer<String, String> producer = new KafkaProducer<String, String>(properties);

        // 3. 发送数据
        for(int i =1;i<11;i++){
            // 4. 造数据
            String message= "客官你好，我是"+i+"号，很高兴为您服务！";
            // 5. 包装
            final ProducerRecord<String, String> producerRecord = new ProducerRecord<String, String>(
                    "first",
                    i+"",
                    message
            );
            System.out.println("你看看我在哪里？");
            //Thread.sleep(30);
            // 6. 发送
            producer.send(producerRecord, new Callback() {
                @Override
                public void onCompletion(RecordMetadata metadata, Exception exception) {
                    if(exception == null){
                        int partition = metadata.partition();
                        long offset = metadata.offset();
                        System.out.println("数据："+producerRecord.value()+", 分区："+partition+", 偏移量："+offset);
                    }

                }
            });
        }

        // 4. 关闭资源
        producer.close();
    }
}

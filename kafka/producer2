package com.atguigu.kafka.producer;

import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.serialization.StringSerializer;

import java.util.Properties;

/**
 * @author leon
 * @ClassName CustomProducer.java
 * @createTime 2022年06月18日 15:39:00
 */
public class CustomProducerCallback {
    public static void main(String[] args) throws InterruptedException {
        // 1. 创建配置对象
        Properties properties = new Properties();                  //在配置对象里面设置服务器、系列化器等
        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"hadoop102:9092,hadoop103:9092");
        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());

        properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG,"com.atguigu.kafka.partition.CustomPartitioner");

        // 2. 创建kafkaProducer对象
        KafkaProducer<String, String> producer = new KafkaProducer<String, String>(properties);

        // 3. 发送数据
        for(int i =1;i<11;i++){
            // 4. 造数据
            String message= "客官你好，我是"+i+"号，很高兴为您服务！";
            // 5. 包装
            final ProducerRecord<String, String> producerRecord = new ProducerRecord<String, String>(
                    "tt",
                    i+"",   //利用key值的hash值所定义的分区
                    message
            );
            System.out.println("你看看我在哪里？");
            //Thread.sleep(30);
            // 6. 发送
            producer.send(producerRecord, new Callback() {                //每个producer的不同只在于send方法的不同  当producer收到ack时调用
                @Override
                public void onCompletion(RecordMetadata metadata, Exception exception) {   //recordmetadata里面可以获取分区号、偏移量、数据等信息
                    if(exception == null){
                        int partition = metadata.partition();
                        long offset = metadata.offset();
                        System.out.println("数据："+producerRecord.value()+", 分区："+partition+", 偏移量："+offset);
                    }

                }
            });
        }

        // 4. 关闭资源
        producer.close();
    }
}
